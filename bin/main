#!/usr/bin/env ruby
class TicTacToe
  attr_accessor :board

  def initialize
    @board = ['', '', '', '', '', '', '', '', '']
  end

  def board_interface
    puts "#{@board[0]} | #{@board[1]}  | #{@board[2]}"
    puts '________'
    puts "#{@board[3]} | #{@board[4]}  | #{@board[5]}"
    puts '________'
    puts "#{@board[6]} | #{@board[7]}  | #{@board[8]}"
  end

  # Start Check winer player

  def win_case
    @win_cases = [
      [0, 1, 2],
      [3, 4, 5],
      [6, 7, 8],
      [0, 4, 8],
      [2, 4, 6],
      [2, 5, 8],
      [1, 4, 7],
      [0, 3, 6]
    ]
  end

  def win_var
    @count_win_x = 0
    @count_win_o = 0
    @every_move = 0
    @win_leng = @win_cases.length
  end

  def loop_on_cases
    @win_cases[@every_move].each do |item|
      @count_win_x += 1 if @board[item] == 'X'
      @count_win_o += 1 if @board[item] == 'O'
    end
  end

  def check_which_win
    if @count_win_x < 3 && @count_win_o < 3
      @count_win_x = 0
      @count_win_o = 0
      @every_move += 1
      true
    end
  end

  def win
    win_case
    win_var
    loop do
      loop_on_cases
      break unless check_which_win # check_which_win (break)
      break if @every_move == @win_leng
    end
    check_winer
  end

  def check_winer
    if @count_win_x > @count_win_o || @count_win_x < @count_win_o
      p 'You Win'
      true
    else
      false
    end
  end

  # End Check winer player

  def game_numbers
    @all_numbers = (1..9).to_a
    @already_used = [0]
  end

  def win_methods
    player_input
    invalid
    avaliable_inputs
    p board_interface
  end

  def start_game
    game_numbers
    until win
      win_methods
      break if win

      if @avaliable.empty?
        p 'draw'
        break
      end
    end
  end

  def player_input
    puts 'Type number from 1 to 9'
    @player_number = gets.chomp.to_i
  end

  def avaliable_inputs
    @already_used << @player_number
    @avaliable = @all_numbers - @already_used
    p "These numbers are avaliable for next player #{@avaliable}"
  end

  def invalid
    if @already_used.include?(@player_number) || !(1..9).cover?(@player_number)
      p "Number #{@player_number} is invalid number."
    else
      @already_used.each_index do |index|
        @board[@player_number - 1] = index.odd? ? 'O' : 'X'
      end
    end
  end
end

game = TicTacToe.new
p game.start_game
