#!/usr/bin/env ruby
class TicTacToe
  attr_accessor :board

  def initialize
    @board = ['', '', '', '', '', '', '', '', '']
  end

  def board_interface
    puts "#{@board[0]} | #{@board[1]}  | #{@board[2]}"
    puts '________'
    puts "#{@board[3]} | #{@board[4]}  | #{@board[5]}"
    puts '________'
    puts "#{@board[6]} | #{@board[7]}  | #{@board[8]}"
  end

  # win cases
  #def win
  #  true if (@board[0] = @board[1] = @board[2]).eql?('X' && 'O')
  #  true if (@board[3] = @board[4] = @board[5]).eql?('X' && 'O')
  #  true if (@board[6] = @board[7] = @board[8]).eql?('X' && 'O')
  #  true if (@board[0] = @board[4] = @board[8]).eql?('X' && 'O')
  #  true if (@board[2] = @board[4] = @board[6]).eql?('X' && 'O')
  #  true if (@board[2] = @board[5] = @board[8]).eql?('X' && 'O')
  #  true if (@board[1] = @board[4] = @board[7]).eql?('X' && 'O')
  #  true if (@board[0] = @board[3] = @board[6]).eql?('X' && 'O')
  #  false
  #end

  # draw
  def draw
    win ? false : true
  end

  def start_game
    win
    draw
    @all_numbers = (1..9).to_a
    @unavailable = []
    until win
      puts 'Type number from 1 to 9'
      @player_number = gets.chomp.to_i
      p invalid
      @unavailable << @player_number
      @avaliable = @all_numbers - @unavailable
      p "These numbers are avaliable for next player #{@avaliable}"
      p board_interface
      if win
        p 'You Win'
        break
      elsif @avaliable.empty?
        p win ? 'You win' : 'draw'
        break
      end
    end
  end

  def invalid
    if @unavailable.include?(@player_number) || !(1..9).cover?(@player_number)
      "Number #{@player_number} is invalid number."
    end
  end
end

game = TicTacToe.new
p game.start_game
